#!/bin/bash

# find environment
. hspf_config
if [ -z "$CBP_ROOT" ]; then
  echo "Can not find file hspf.config"
fi

echo "$@"
cmd=$1
shift
echo "$@"


found=0
# TODO: this loop can be run first, then we can use the find version 2nd
# BEGIN - target directory method
#       in order to insure that if there are duplicates we can prioritize
#       certain directories
#for p in bin run run/standard run/useful run/calibration/PWATER; do
#  if test -f "$CBP_ROOT/$p/$cmd"; then
#    echo "Found $cmd in $CBP_ROOT/run/$p/$cmd"
#    # todo: have specific handlers to catch legacy scripts and use a different directory
#    # instead of the default "bin"
#    cd $CBP_ROOT/$p
#    $CBP_ROOT/$p/$cmd "$@"
#    found=1
#  fi
#done
# END - target directory method

# BEGIN - find based method
#try replacing do loop with this find command
# returns only the first match
for edir in bin run/standard run input/param/scripts config/control/calib/PWATER config/control/land config/control/river; do
  eroot="$CBP_ROOT/$edir"
  cd $eroot
  fpath=`find *|grep $cmd | head -n 1`
  # we extract this path in case their is a partial name match
  if [ "$fpath" != "" ]; then
    echo "cd $eroot"
    p=`dirname $fpath`
    echo "searching $eroot/$p/$cmd"
    if test -f "$eroot/$p/$cmd"; then
      echo "Found $cmd in $eroot/$p/$cmd"
      # todo: have specific handlers to catch legacy scripts and use a different directory
      # instead of the default "bin"
      if [ "$edir" == "bin" ]; then
        $cmd "$@"
      else
        cd $eroot/$p
        $eroot/$p/$cmd "$@"
      fi
      found=1
    fi
  fi
done

if [ $found -eq 0 ]; then
  echo "Error: Could not find '$cmd' in directory tree"
fi
