************************************************************************
** The program reads AFO/CAFO annual loads from a file generated by   **
**    Scenario Builder, and then covert the loads to hourly values    **
**    and put into land WDM                                           **
************************************************************************

      implicit none
      include 'land.inc'

      integer nloads
      parameter (nloads=6)                                 ! number of afo/cafo load
      character*4 loadnm(nloads)
      data loadnm /'no3n','nh3n','orgn','po4p','orgp','sedm'/ !these names must match exaxtly load name in files from SB
      integer iloads(nloads)

      integer     NLVAR,NLVARMAX
      parameter   ( NLVARMAX = 6 )
      !TODO Populate using iovar file afocfo_loads
      character*4 Lvname(NLVARMAX)
      data Lvname /'SNO3','SLON','SNH3','SPO4','SLOP','SEDM'/
      integer     Ldsn(NLVARMAX)
      !TODO Polulate from iovar/implnd file
      data Ldsn   /145,146,144,153,155,121/

      character*4 Tload
      character*3 clu,Tlu,CLUUC
      character*6 Tlseg     ! land segment
      character*13 Trseg    ! river segment
      character*300 dline

      integer ns
      character*300 command

      integer year1,year2,oldyear
      integer year,month,day,hour
      integer nl,nLB,n,i,j

      integer indx1,indx2
      logical lastindx

      integer maxTimeBreaks
      parameter (maxTimeBreaks = 35)
      integer LByear(maxTimeBreaks)             ! year of break
      integer LBmonth(maxTimeBreaks)            ! month
      integer LBday(maxTimeBreaks)              ! day
      character*40 LBfile(maxTimeBreaks)

*************** load related variables
      real NH3N(EarliestYear:LatestYear)
      real NO3N(EarliestYear:LatestYear)
      real ORGN(EarliestYear:LatestYear)
      real PO4P(EarliestYear:LatestYear)
      real ORGP(EarliestYear:LatestYear)
      real SEDM(EarliestYear:LatestYear) 

      real SLONload(EarliestYear:LatestYear)
      real SNH3load(EarliestYear:LatestYear)
      real SNO3load(EarliestYear:LatestYear)
      real SPO4load(EarliestYear:LatestYear) 
      real SLOPload(EarliestYear:LatestYear)
      real SEDMload(EarliestYear:LatestYear)

      real SLONcon(EarliestYear:LatestYear)
      real SNH3con(EarliestYear:LatestYear)
      real SNO3con(EarliestYear:LatestYear)
      real SPO4con(EarliestYear:LatestYear)
      real SLOPcon(EarliestYear:LatestYear)
      real SEDMcon(EarliestYear:LatestYear)

      real NPratio          ! N to P ratio
      parameter (NPratio = 0.01384)

      real CVN2BOD

      real load(maxTimeBreaks,nloads),ann
      real annload(EarliestYear:LatestYear,nloads)

*************** WDM related variables
      integer wdmfil
      parameter (wdmfil=dfile+10)

      integer sdate(ndate),edate(ndate)

      integer flowdsn
      data    flowdsn /111/

      real flowvals(ndaymax*24)       ! flow
      double precision annflow(EarliestYear:LatestYear)

      real hSLON(ndaymax*24),hSNH3(ndaymax*24),hSNO3(ndaymax*24)
      real hSLOP(ndaymax*24),hSPO4(ndaymax*24)
      real hSEDM(ndaymax*24)

      logical foundload(nloads)

      logical debug0
      data debug0 / .false. /
      data debug0 / .true. /
      
***************** END DECLARATION ************************************


      read*,rscen,rseg,clu

      call lencl(rscen,lenrscen)
      call lencl(rseg,lenrseg)
c      call lencl(lseg,lenlseg)
      print*,rscen
      print*,rscen(:lenrscen)

      call readcontrol_tmsce(rscen,lenrscen,clu,
     O                      sdate(1),sdate(2),sdate(3),
     O                      edate(1),edate(2),edate(3),
     O                      lscen)
      print*,rscen,lscen
      call lencl(lscen,lenlscen)

******** READ THE CONTROL FILE FOR AFO LOAD FILE
      CLUUC = clu
      call uppercase(CLUUC)
      call readcontrol_load(rscen,lenrscen,
     .                      CLUUC//' LOADS',9,
     .                      'END '//CLUUC//' LOADS',13,
     O                      nLB,LByear,LBfile)

      if (nLB.eq.1) then
        nLB = 2
        LByear(2) = LByear(1) +  1
        LBfile(2) = LBfile(1)
      end if

c      sdate(1) = reqSRTy
c      sdate(2) = reqSRTm
c      sdate(3) = reqSRTd
      sdate(4) = 0
      sdate(5) = 0
      sdate(6) = 0

c      edate(1) = reqENDy
c      edate(2) = reqENDm
c      edate(3) = reqENDd
      edate(4) = 24
      edate(5) = 0
      edate(6) = 0

      call readcontrol_Rioscen(
     I                          rscen,lenrscen,
     O                          ioscen)
      call lencl(ioscen,lenioscen)
      print*,ioscen(:lenioscen)

      fnam = catdir//'iovars/'//ioscen(:lenioscen)//'/species_cvfactor'
      !SPECIES1 = 'NITR'
      !SPECIES2 = 'BODX'
      call SPECIES_CVFACTOR(fnam,'NITR','BODX',CVN2BOD)

      ! TODO read afocfo_load table
      NLVAR = NLVARMAX

***** GET THE START YEAR
      year1 = sdate(1)
      year2 = edate(1)


      call getl2r(rseg,rscen,lenrscen,
     O            numsegs,l2r)

********** open dummy wdm
        wdmfnam = dummyWDMname
        call wdbopnlong(wdmfil+1,wdmfnam,0,err)

***** process land segments
      do ns = 1,numsegs
      !{

        call lencl(l2r(ns),lenlseg)
c      do l = 1,nlu
c        if ( luname(l).eq.clu .and. isloadlu(l) ) then
        wdmfnam = outwdmdir//'land/'//clu//'/'//
     .          lscen(:lenlscen)//'/'//clu//'_'//
     .          l2r(ns)(:lenlseg)//'_'//rseg(:lenrseg)//'.wdm'
        command =
     .      'cp -v '//
     .          outwdmdir//'land/'//clu//'/'//
     .          lscen(:lenlscen)//'/'//clu//
     .          l2r(ns)(:lenlseg)//'.wdm'//
     .      ' '//
c     .          outwdmdir//'river/'//rscen(:lenrscen)//'/loads/'//
c     .          lscen(:lenlscen)//'_'//clu//'_'//
c     .          l2r(ns)(:lenlseg)//'_'//rseg(:lenrseg)//'.wdm'
c     .          outwdmdir//'land/'//clu//'/'//
c     .          lscen(:lenlscen)//'/'//clu//'_'//
c     .          l2r(ns)(:lenlseg)//'_'//rseg(:lenrseg)//'.wdm'
     .          wdmfnam
              if (command(300-4:300).ne.'     ') go to 998
              print*, command
        call system(command)
c        end if
c      end do

***** initilize variable
        do n = 1, maxTimeBreaks               
          do nl = 1, nloads
            load(n,nl) = 0.0
          end do
        end do

        do year = EarliestYear,LatestYear 
          annflow(year) =0.0
          do nl = 1, nloads
            annload(year,nl) = 0.0
          end do
        end do

********read in afo/cafo loads            
        do n = 1,nLB
        !{
          call trims(LBfile(n),last)
        
          fnam = ScenDatDir//'river/loads/'//clu//'_'//
     .       LBfile(n)(:last)//'.csv'
          if(debug0)print*,'... reading ',fnam
          open (dfile,file=fnam,status='old',iostat=err)
          if (err.ne.0) go to 991
         
c          read(dfile,'(a300)',err=1000)dline          ! read header line

********** read down to find the land seg
c          do nl = 1,nloads
c            foundload(nl) = .false.
c          end do

          read(dfile,'(a300)',err=1000,end=992) dline
          call d2x(dline,last)
          if (dline(len(dline)-3:len(dline)).ne.'    ') go to 993

          call findcomma(dline,last)
          if (dline(:last-1).ne.'riverseg') go to 801

          call shift(dline)
          call findcomma(dline,last)
          if (dline(:last-1).ne.'landseg') go to 802

          do nl = 1,nloads
            foundload(nl) = .false.
            call shift(dline)
            call findcomma(dline,last)
            do i = 1,nloads
              if (dline(:last-1).eq.loadnm(i)) then
                 if ( debug0 ) 
     .             print*,'... ... found ',dline(:last-1),' ',
     .               loadnm(i),' at col ',i
                 iloads(nl) = i
                 foundload(nl) = .true.
              end if
            end do
            if (foundload(nl) .eqv. .false.) go to 803
          end do
        

          do
            read(dfile,'(a300)',err=1001,end=992) dline
            call d2x(dline,last)
            if (dline(len(dline)-3:len(dline)).ne.'    ') go to 993
            call findcomma(dline,last)
            Trseg = dline(:last-1)
c            print*,'>',Trseg,'<'
            if (Trseg .eq. rseg) then         ! get river segment
              call shift(dline)
              call findcomma(dline,last)
              Tlseg = dline(:last-1)
              if (Tlseg.eq.l2r(ns)(:lenlseg)) then          ! get land segment
                if(debug0)print*,'... ... LRsegs: ',Trseg,' ',Tlseg
                do nl = 1,nloads
                  call shift(dline)
                  call fread(dline,load(n,iloads(nl)))
                  if(debug0)print*,'... ... ',nl,' ',loadnm(iloads(nl)),
     .                   load(n,iloads(nl))
                end do
              end if
            end if
          end do
c              call shift(dline)
c              call findcomma(dline,last)
c              Tlu = dline(:last-1)           
c              call lowercase(Tlu)
c              if (Tlu.eq.clu) then           ! get land use
c                call shift(dline)
c                call findcomma(dline,last)
c                Tload = dline(:last-1)         ! find load species
c                call lowercase(Tload)
c                do nl = 1,nloads+1
c                  if (nl.eq.nloads+1) go to 994
c                  if (Tload.eq.loadnm(nl)) exit
c                end do
c                foundload(nl) = .true.
c                call shift(dline)
c                call fread(dline,load(n,nl))
c              end if
c            end if
c          end if
          
c        end do

992       close (dfile)
        !}
        end do         ! finish reading all nB load files

C      do nl = 1,nloads
C        if (.not.foundload(nl)) go to 995
C      end do
     
********** interperate to get annual loads for each constitutes
        do nl = 1,nloads

          if (nLB.gt.0) then  ! if all missing, then don't do this species
            year = year1
            indx1 = 1
            indx2 = 2
            lastindx = .false.
            do while (year.le.year2)
              do while ((year.le.LByear(indx2).or.lastindx)
     .                     .and.year.le.year2)
                if (load(indx1,nl).gt.-1) then
                  ann = load(indx1,nl) +
     .                (load(indx2,nl)-load(indx1,nl))/
     .                 real(LByear(indx2)-LByear(indx1))*
     .                 real(year-LByear(indx1))
                  annload(year,nl) = max(ann,0.0)
                end if
                year = year + 1
              end do
              if (indx2.eq.nLB) then
                lastindx = .true.
              else
                indx2 = indx2 + 1
                indx1 = indx1 + 1
              end if
            end do
          end if  ! if this species exists

        end do  ! loop over species

********** rearrange variables for each species
        do year = year1, year2
          NO3N(year) = annload(year,1)
          NH3N(year) = annload(year,2)
          ORGN(year) = annload(year,3)
          PO4P(year) = annload(year,4)
          ORGP(year) = annload(year,5)
          SEDM(year) = annload(year,6)
        end do

********** create WDM variable from loads
        if(debug0)print*,'... ... ... Annual Loads ',rseg,' ',
     .    l2r(ns)(:lenlseg)
        do year = year1, year2
          SNO3load(year) = NO3N(year)
c          SLONload(year) = min(ORGN(year),ORGP(year)/NPratio)
          SLONload(year) = ORGN(year)
          if(debug0)print*,'... ... ... ORGN ',year,SLONload(year)
          SNH3load(year) = NH3N(year)+ORGN(year)-SLONload(year)
c          SPO4load(year) = PO4P(year)+ORGP(year)-SLONload(year)*NPratio
          SPO4load(year) = PO4P(year)
          SLOPload(year) = ORGP(year)
          SEDMload(year) = SEDM(year)
        end do

c      wdmfnam = outwdmdir//'land/'//clu//'/'//lscen(:lenlscen)//
c     .          '/'//clu//lseg(:lenlseg)//rseg(:lenrseg)//'.wdm'
c        wdmfnam = clu//lseg(:lenlseg)//rseg(:lenrseg)//'.wdm'
c        wdmfnam = outwdmdir//'river/'//rscen(:lenrscen)//'/loads/'//
c     .          lscen(:lenlscen)//'_'//clu//'_'//
c     .          l2r(ns)(:lenlseg)//'_'//rseg(:lenrseg)//'.wdm'
        call wdbopnlong(wdmfil,wdmfnam,1,err)     ! open land read only
        if (err .ne. 0) go to 996

        call gethourdsn(wdmfil,sdate,edate,flowdsn,
     O                nvals,flowvals)
       
********** get annual flow
        hour = 0
        year = sdate(1)
        month = sdate(2)
        day = sdate(3)
        oldyear = year

        do i = 1,nvals
          hour = hour + 1
          annflow(oldyear) = annflow(oldyear) + flowvals(i)
          if (hour.eq.24) then
            hour = 0
            call tomorrow(year,month,day)
          end if
          
          if (year.ne.oldyear .and.oldyear.le.year2) then
            SNO3con(oldyear)= SNO3load(oldyear)/annflow(oldyear)
            SLONcon(oldyear)= SLONload(oldyear)/annflow(oldyear)
            SNH3con(oldyear)= SNH3load(oldyear)/annflow(oldyear)
            SPO4con(oldyear)= SPO4load(oldyear)/annflow(oldyear)
            SLOPcon(oldyear)= SLOPload(oldyear)/annflow(oldyear)
            SEDMcon(oldyear)= SEDMload(oldyear)/annflow(oldyear)
            oldyear = year
          end if
        end do

********** get hourly loads
        hour = 0
        year = sdate(1)
        month = sdate(2)
        day = sdate(3)
        oldyear = year

        do i = 1,nvals
          hSNO3(i) = SNO3con(oldyear)*flowvals(i)
          hSLON(i) = SLONcon(oldyear)*flowvals(i)
          hSNH3(i) = SNH3con(oldyear)*flowvals(i)
          hSPO4(i) = SPO4con(oldyear)*flowvals(i)
          hSLOP(i) = SLOPcon(oldyear)*flowvals(i)
          hSEDM(i) = SEDMcon(oldyear)*flowvals(i)

          hour = hour + 1
          if (hour.eq.24) then
            hour = 0
            call tomorrow(year,month,day)
          end if
          if (year.ne.oldyear .and. year.le.year2) then
            oldyear = year
          end if
        end do

******** find the loads for each land varible in WDM
        do j = 1,NLVAR
          if(Lvname(j) .eq. 'SNO3')
     .      call puthourdsn(wdmfil,sdate,edate,Ldsn(j),nvals,hSNO3)
          if(Lvname(j) .eq. 'SLON') then
            if(debug0)print*,'writing SLON ',Ldsn(j)
            call puthourdsn(wdmfil,sdate,edate,Ldsn(j),nvals,hSLON)
          end if
          if(Lvname(j) .eq. 'SNH3')
     .      call puthourdsn(wdmfil,sdate,edate,Ldsn(j),nvals,hSNH3)
          if(Lvname(j) .eq. 'SPO4')
     .      call puthourdsn(wdmfil,sdate,edate,Ldsn(j),nvals,hSPO4)
          if(Lvname(j) .eq. 'SLOP')
     .      call puthourdsn(wdmfil,sdate,edate,Ldsn(j),nvals,hSLOP)
          if(Lvname(j) .eq. 'SEDM')
     .      call puthourdsn(wdmfil,sdate,edate,Ldsn(j),nvals,hSEDM)
c        do i = 1,nvals
c          hval(i) = 0.
c          if(Lvname(j) .eq. 'SNO3') hval(i) = hSNO3(i)
c          if(Lvname .eq. 'SBOD') hval(i) = hSLON(i) * CVN2BOD
c          if(Lvname(j) .eq. 'SLON') hval(i) = hSLON(i)
c          if(Lvname(j) .eq. 'SNH3') hval(i) = hSNH3(i) 
c          if(Lvname(j) .eq. 'SPO4') hval(i) = hSPO4(i)
c          if(Lvname(j) .eq. 'SLOP') hval(i) = hSLOP(i) 
c          if(Lvname(j) .eq. 'SEDM') hval(i) = hSEDM(i)
c        end do
c        call puthourdsn(wdmfil,sdate,edate,Ldsn(j),nvals,hval)
        end do

        call wdflcl(wdmfil,err)
        if (err.ne.0) go to 997
      !}
      end do

      return

****************** ERROR SPACE ****************************************
801   report(1) = 'problem parsing header variables'
      report(2) = fnam
      report(3) = dline(:last-1)//' vs '//'riverseg'
      go to 999

802   report(1) = 'problem parsing header variables'
      report(2) = fnam
      report(3) = dline(:last-1)//' vs '//'landseg'
      go to 999

803   report(1) = 'problem parsing header variables'
      report(2) = fnam
      report(3) = dline(:last-1)//' vs '//loadnm(i)
      go to 999

951   report(1) = 'error writing to file'
      report(2) = fnam
      report(3) = 'possible permission problem'
      go to 999

991   report(1) = 'Problem opening file:'
      report(2) = fnam
      report(3) = 'error = '
      write(report(3)(9:11),'(i3)')err
      go to 999

993   report(1) = 'data line too long, modify '
      report(2) = fnam
      report(3) = ' '
      go to 999

994   report(1) = ' do not recognize nutrient loads '//Tload
      report(2) = ' found in file:  must match varible declared'
      report(3) = fnam
      go to 999

995   report(1) = ' load species not found in file'//loadnm(nl)
      report(2) = ' check load file'
      report(3) = fnam
      go to 999

996   if (err.lt.0) then
        report(1) = 'Error: opening wdm= '
        write(report(1)(22:24),'(i3)')err
        report(2) = wdmfnam
      else
        report(1) = wdmfnam
        report(2) = ' is not a wdm file'
      end if
      report(3) = ' '
      go to 999

997   report(1) = 'Error: closing wdm = '
      write(report(1)(22:24),'(i3)')err
      report(2) = ' '
      report(3) = ' '
      go to 999

998   report(1) = 'Problem with command'
      report(2) = ''
      report(2) = ''
      go to 999

1000  report(1) = 'Could not read first line in file '
      report(2) = fnam
      report(3) = ' '
      go to 999

1001  report(1) = 'Could not read file: near line: '
      report(2) = fnam
      report(3) = dline
      go to 999

999   call stopreport(report)

      end


