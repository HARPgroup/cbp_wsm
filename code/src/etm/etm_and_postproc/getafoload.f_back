************************************************************************
** The program reads AFO/CAFO annual loads from a file generated by   **
**    Scenario Builder, and then covert the loads to hourly values    **
**    and put into land WDM                                           **
************************************************************************
      subroutine getafoload(rscen,rseg,lscen,lseg,
     I                      clu,sdate,edate,Lvname,
     O                      nvals,hval)

      implicit none
      include 'land.inc'

      integer nafoloads
      parameter (nafoloads=6)                                 ! number of afo/cafo load
      character*4 loadnm(nafoloads)
      data loadnm /'no3n','nh3n','orgn','po4p','orgp','sedm'/ !these names must match exaxtly load name in files from SB

      character*4 Lvname,Tload
      character*3 clu,Tlu
      character*6 Tlseg     ! land segment
      character*13 Trseg    ! river segment
      character*300 dline

      integer year1,year2,oldyear
      integer year,month,day,hour
      integer nl,nLB,n,i

      integer indx1,indx2
      logical lastindx

      integer maxTimeBreaks
      parameter (maxTimeBreaks = 30)
      integer LByear(maxTimeBreaks)             ! year of break
      integer LBmonth(maxTimeBreaks)            ! month
      integer LBday(maxTimeBreaks)              ! day
      character*40 LBfile(maxTimeBreaks)

*************** load related variables
      real NH3N(EarliestYear:LatestYear)
      real NO3N(EarliestYear:LatestYear)
      real ORGN(EarliestYear:LatestYear)
      real PO4P(EarliestYear:LatestYear)
      real ORGP(EarliestYear:LatestYear)
      real SEDM(EarliestYear:LatestYear) 

      real SLONload(EarliestYear:LatestYear)
      real SNH3load(EarliestYear:LatestYear)
      real SNO3load(EarliestYear:LatestYear)
      real SPO4load(EarliestYear:LatestYear) 
      real SEDMload(EarliestYear:LatestYear)

      real SLONcon(EarliestYear:LatestYear)
      real SNH3con(EarliestYear:LatestYear)
      real SNO3con(EarliestYear:LatestYear)
      real SPO4con(EarliestYear:LatestYear)
      real SEDMcon(EarliestYear:LatestYear)

      real NPratio          ! N to P ratio
      parameter (NPratio = 0.01384)

      real load(maxTimeBreaks,nafoloads),ann
      real annload(EarliestYear:LatestYear,nafoloads)

*************** WDM related variables
      integer wdmfil
      parameter (wdmfil=dfile+10)

      integer sdate(ndate),edate(ndate)

      integer flowdsn
      data    flowdsn /111/

      real flowvals(ndaymax*24)       ! flow
      real annflow(EarliestYear:LatestYear)

      real hSLON(ndaymax*24),hSNH3(ndaymax*24)
      real hSNO3(ndaymax*24),hSPO4(ndaymax*24)
      real hSEDM(ndaymax*24)

      logical foundload(nafoloads)
      
***************** END DECLARATION ************************************

      call lencl(rscen,lenrscen)
      call lencl(lscen,lenlscen)
      call lencl(rseg,lenrseg)
      call lencl(lseg,lenlseg)
 
***** GET THE START YEAR
      year1 = sdate(1)
      year2 = edate(1)
   
***** initilize variable
      do n = 1, maxTimeBreaks               
        do nl = 1, nafoloads
          load(n,nl) = 0.0
        end do
      end do

      do year = EarliestYear,LatestYear 
        annflow(year) =0.0
        do nl = 1, nafoloads
          annload(year,nl) = 0.0
        end do
      end do

******** READ THE CONTROL FILE FOR AFO LOAD FILE
      call readcontrol_load(rscen,lenrscen,
     O                      nLB,LByear,LBfile)

      if (nLB.eq.1) then
        nLB = 2
        LByear(2) = LByear(1) +  1
        LBfile(2) = LBfile(1)
      end if

********read in afo/cafo loads            
      do n = 1,nLB
        
        call trims(LBfile(n),last)
        
      fnam = ScenDatDir//'river/loads/afocfoload_'//
     .       LBfile(n)(:last)//'.csv'
      open (dfile,file=fnam,status='old',iostat=err)
      if (err.ne.0) go to 991
         
        read(dfile,'(a300)',err=1000)dline          ! read header line

********** read down to find the land seg
        do nl = 1,nafoloads
          foundload(nl) = .false.
        end do

        do
          read(dfile,'(a300)',err=1001,end=992) dline
          call d2x(dline,last)
          if (dline(len(dline)-3:len(dline)).ne.'    ') go to 993
          call findcomma(dline,last)
          Trseg = dline(:last-1)
          if (Trseg .eq. rseg) then         ! get river segment
            call shift(dline)
            call findcomma(dline,last)
            Tlseg = dline(:last-1)
            if (Tlseg.eq.lseg) then          ! get land segment
              call shift(dline)
              call findcomma(dline,last)
              Tlu = dline(:last-1)           
              call lowercase(Tlu)
              if (Tlu.eq.clu) then           ! get land use
                call shift(dline)
                call findcomma(dline,last)
                Tload = dline(:last-1)         ! find load species
                call lowercase(Tload)
                do nl = 1,nafoloads+1
                  if (nl.eq.nafoloads+1) go to 994
                  if (Tload.eq.loadnm(nl)) exit
                end do
                foundload(nl) = .true.
                call shift(dline)
                call fread(dline,load(n,nl))
              end if
            end if
          end if
          
        end do

992     close (dfile)

      end do         ! finish reading all load files

C      do nl = 1,nafoloads
C        if (.not.foundload(nl)) go to 995
C      end do
     
********** interperate to get annual loads for each constitutes
      do nl = 1,nafoloads

        if (nLB.gt.0) then  ! if all missing, then don't do this species
          year = year1
          indx1 = 1
          indx2 = 2
          lastindx = .false.
          do while (year.le.year2)
            do while ((year.le.LByear(indx2).or.lastindx)
     .                     .and.year.le.year2)
              if (load(indx1,nl).gt.-1) then
                ann = load(indx1,nl) +
     .                (load(indx2,nl)-load(indx1,nl))/
     .                 real(LByear(indx2)-LByear(indx1))*
     .                 real(year-LByear(indx1))
                annload(year,nl) = max(ann,0.0)
              end if
              year = year + 1
            end do
            if (indx2.eq.nLB) then
              lastindx = .true.
            else
              indx2 = indx2 + 1
              indx1 = indx1 + 1
            end if
          end do
        end if  ! if this species exists

      end do  ! loop over species

********** rearrange variables for each species
      do year = year1, year2
        NO3N(year) = annload(year,1)
        NH3N(year) = annload(year,2)
        ORGN(year) = annload(year,3)
        PO4P(year) = annload(year,4)
        ORGP(year) = annload(year,5)
        SEDM(year) = annload(year,6)
      end do

********** create WDM variable from loads
      do year = year1, year2
        SNO3load(year) = NO3N(year)
        SLONload(year) = min(ORGN(year),ORGP(year)/NPratio)
        SNH3load(year) = NH3N(year)+ORGN(year)-SLONload(year)
        SPO4load(year) = PO4P(year)+ORGP(year)-SLONload(year)*NPratio
        SEDMload(year) = SEDM(year)
      end do

********** open land WDM to get flow info
      wdmfnam = outwdmdir//'land/'//clu//'/'//lscen(:lenlscen)//
     .          '/'//clu//lseg(:lenlseg)//'.wdm'
      call wdbopnlong(wdmfil,wdmfnam,1,err)     ! open land read only
      if (err .ne. 0) go to 996

      call gethourdsn(wdmfil,sdate,edate,flowdsn,
     O                nvals,flowvals)
       
********** get annual flow
      hour = 0
      year = sdate(1)
      month = sdate(2)
      day = sdate(3)
      oldyear = year

      do i = 1,nvals
        hour = hour + 1
        annflow(oldyear) = annflow(oldyear) + flowvals(i)
        if (hour.eq.24) then
          hour = 0
          call tomorrow(year,month,day)
        end if
          
        if (year.ne.oldyear .and.year.le.year2) then
          SNO3con(oldyear)= SNO3load(oldyear)/annflow(oldyear)
          SLONcon(oldyear)= SLONload(oldyear)/annflow(oldyear)
          SNH3con(oldyear)= SNH3load(oldyear)/annflow(oldyear)
          SPO4con(oldyear)= SPO4load(oldyear)/annflow(oldyear)
          SEDMcon(oldyear)= SEDMload(oldyear)/annflow(oldyear)
          oldyear = year
        end if
      end do

********** get hourly loads
      hour = 0
      year = sdate(1)
      month = sdate(2)
      day = sdate(3)
      oldyear = year

      do i = 1,nvals
        hSNO3(i) = SNO3con(oldyear)*flowvals(i)
        hSLON(i) = SLONcon(oldyear)*flowvals(i)
        hSNH3(i) = SNH3con(oldyear)*flowvals(i)
        hSPO4(i) = SPO4con(oldyear)*flowvals(i)
        hSEDM(i) = SEDMcon(oldyear)*flowvals(i)

        hour = hour + 1
        if (hour.eq.24) then
          hour = 0
          call tomorrow(year,month,day)
        end if
        if (year.ne.oldyear .and. year.le.year2) then
          oldyear = year
        end if
      end do

******** find the loads for each land varible in WDM
      do i = 1,nvals
        hval(i) = 0.
        if(Lvname .eq. 'SNO3') hval(i) = hSNO3(i)
        if(Lvname .eq. 'SLON') hval(i) = hSLON(i)  
        if(Lvname .eq. 'SNH3') hval(i) = hSNH3(i) 
        if(Lvname .eq. 'SPO4') hval(i) = hSPO4(i) 
        if(Lvname .eq. 'SEDM') hval(i) = hSEDM(i)
      end do

      call wdflcl(wdmfil,err)
      if (err.ne.0) go to 997
       
      return

****************** ERROR SPACE ****************************************
951   report(1) = 'error writing to file'
      report(2) = fnam
      report(3) = 'possible permission problem'
      go to 999

991   report(1) = 'Problem opening file:'
      report(2) = fnam
      report(3) = 'error = '
      write(report(3)(9:11),'(i3)')err
      go to 999

993   report(1) = 'data line too long, modify '
      report(2) = fnam
      report(3) = ' '
      go to 999

994   report(1) = ' do not recognize nutrient loads '//Tload
      report(2) = ' found in file:  must match varible declared'
      report(3) = fnam
      go to 999

995   report(1) = ' load species not found in file'//loadnm(nl)
      report(2) = ' check load file'
      report(3) = fnam
      go to 999

996   if (err.lt.0) then
        report(1) = 'Error: opening wdm= '
        write(report(1)(22:24),'(i3)')err
        report(2) = wdmfnam
      else
        report(1) = wdmfnam
        report(2) = ' is not a wdm file'
      end if
      report(3) = ' '
      go to 999

997   report(1) = 'Error: closing wdm = '
      write(report(1)(22:24),'(i3)')err
      report(2) = ' '
      report(3) = ' '
      go to 999

1000  report(1) = 'Could not read first line in file '
      report(2) = fnam
      report(3) = ' '
      go to 999

1001  report(1) = 'Could not read file: near line: '
      report(2) = fnam
      report(3) = dline
      go to 999

999   call stopreport(report)

      end


