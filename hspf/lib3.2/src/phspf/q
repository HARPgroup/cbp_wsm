hiouci.f:C      O   ! pw out
hperagut.f:       common/pwsoil/pwsoilD,fieldcp  ! ,pwsoilfc  ! pw add 
hperagut.f:     .         , pwsoilD(4), fieldcp(4), pwsoilfc(4)    ! pw add 
hperagut.f:c ! pw adding
hperagut.f:        pwsoilD(i) = RVAL(i)
hperagut.f:c        pwsoilfc(i) = 0.1*160./RVAL(i+4)
hperagut.f:c ! pw end added
hperagut.f:c!pwout WILTPT(I)= WILTPT(I)* SOILD(I)
hperagut.f:        WILTPT(J)= WILTPT(J)* SOILD(J)   ! pw change
hper.f:C       input for section pwater
hper.f:C       input for section pwtgas
hper.f:C       section pwater is active and producing printout
hper.f:C       section pwtgas is active and producing printout
hper.f:C       section pwater is active and produces printout at this level
hper.f:C       section pwtgas is active and produces printout at this level
hper.f:C       section pwater is active and producing printout
hper.f:C       section pwtgas is active and producing printout
hpergas.f:C     Process input for section pwtgas
hpergas.f:C     process values in table-type pwt-parm1
hpergas.f:C     process values in table-type pwt-parm2
hpergas.f:C     initial temperatures - table-type pwt-temps
hpergas.f:C     initial do and co2 concentrations - table-type pwt-gases
hpergas.f:C       suro,ifwo, and agwo are available from pwater
hpergas.f:C     Accumulate fluxes for section pwtgas
hpergas.f:C     used in material balance check for section pwtgas
hpergas.f:C     handle section pwtgas
hpergas.f:C     handle section pwtgas
hpermst.f:C       read time series supplied by pwater
hpermst.f:C       from pwater
hpernit_1.f:     .            , pwsoilD(4), fieldcp(4)    ! pw add 
hpernit_1.f:      common/pwsoil/pwsoilD,fieldcp   
hpernit_1.f:c   ! pw  will add 
hpernit_1.f:c          pwsoild(j) = soild(j)
hpernit_1.f:c   ! pw added although already has "soilD and soilM"  
hpernit_1.f:c! pw: the next 26 lines are added by pw! ??????? 
hpernit_1.f:c        pwwiltpt = pwwiltpt * pwsoild ! wiltpt from in/in as (in) spec soil
hpernit_1.f:           wiltpt(jw) =   wiltpt(jw) * pwsoild(jw) 
hpernit_1.f:c! pw  end pw added
hpernit_1.f:c pw for dynamic litter, not using!       include     'pwgligl.inc'
hpernit_1.f:      common/pwsoil/pwsoilD,fieldcp         ! pw 
hpernit_1.f:     M           , pwsoild(4),fieldcp(4)    ! pw add 
hpernit_1.f:c ! pw           ,pwwiltpt(4), pwsoild(4), pwfake(5)    ! pw 
hpernit_1.f:c  ! pw adding
hpernit_1.f:c         do jpw = 1, 4
hpernit_1.f:c            pwsoildd(jpw) = wiltpt(jpw) / pwsoild(jpw)   
hpernit_1.f:c  ! pw added !!!!!!!!!!!!!!!!!!!!
hpernit_1.f:     x             , pwsoild(1), uunits,fieldcp(1))    ! pw 
hpernit_1.f:     x             , pwsoild(2), uunits,fieldcp(2))    ! pw 
hpernit_1.f:     x             , pwsoild(1), uunits,fieldcp(1))    ! pw 
hpernit_1.f:     x             , pwsoild(2), uunits,fieldcp(2))    ! pw 
hpernit_1.f:     x             , pwsoild(3), uunits,fieldcp(3))    ! pw 
hpernit_1.f:     x             , pwsoild(4), uunits,fieldcp(4))    ! pw 
hpernit_1.f:     x                   , pwsoildd, uunits,fldcp)  ! pw
hpernit_1.f:     x           , pwsoildd, pwmoistD,fldcp       ! pw
hpernit_1.f:c    x           , pwwiltpt, pwsoild, pwsoilv     ! pw  pwmoistD=SMST
hpernit_1.f:      integer     uunits  ! pw 
hpernit_1.f:c  ! pw adding  
hpernit_1.f:c no! er   pwwiltpt = wiltpt  * cfinma    ! for forest only
hpernit_1.f:         pwmoistD= moistm  /  cfinma   ! correct, mass -> volume (inch)
hpernit_1.f:c no     pwsoilv  = pwsoild * cfinma                     
hpernit_1.f:c  ! pw end added
hpernit_1.f:c! pw out   NICONC= NO3/MOISTM*1.0E6
hpernit_1.f:c! pw out   AMCONC= AMSU/MOISTM*1.0E6
hpernit_1.f:c ! pw  adding
hpernit_1.f:c          if(pwmoistD .lt. 0.2*pwsoildd) then 
hpernit_1.f:           if( SMST    .lt. fldcp)then ! 0.2*pwsoildd = fldcp 
hpernit_1.f:c ! pw end-added 
hpernit_1.f:c ! pw out    IMMNI= KSINIK*NICONC/(CSINI+ NICONC)
hpernit_1.f:c ! pw out    IMMNI= IMMNI*MOISTM/1.0E6
hpernit_1.f:c ! pw adding !!!!
hpernit_1.f:c             if(pwmoistD .lt. wiltpt ) then   ! compare depth of water
hpernit_1.f:c  ! pw end added   
hpernit_1.f:c! pw out     IMMAM= KSIAMK*AMCONC/(CSIAM+ AMCONC)
hpernit_1.f:c! pw out     IMMAM= IMMAM*MOISTM/1.0E6
hpernit_1.f:c             if(pwmoistD .lt. wiltpt ) then   ! compare depth of water
hpernit_1.f:c  ! pw end added   
hpernit_1.f:c ! pw adding for moisture affect 
hpernit_1.f:c pla.n        (   (smst-wiltpt)/(pwsoildd*0.2 - wiltpt)  )
hpernit_1.f:c    .         (0.5+(0.5 * (smst-wiltpt)/(pwsoildd*0.2 - wiltpt) ))
hpernit_1.f:c!   .         (0.5 * (1.0 + (smst-wiltpt)/(pwsoildd*0.2 - wiltpt) ) )
hpernit_1.f:c    .         (0.5+0.5*((smst-wiltpt)/(pwsoildd*0.2 - wiltpt) )**0.25)
hpernit_1.f:c! pw out     UTNTOT= NUPTG+ NDEFC
hpernit_1.f:c ! pw end added   
hpernit_1.f:c!pw out!!    UTNTOT= NUPTG+ NDEFC
hpernit_1.f:c! pw out     UTNI= KSUNIK*NICONC/(CSUNI+ NICONC)
hpernit_1.f:c! pw out     UTNI= UTNI*MOISTM/1.0E6
hpernit_1.f:c ! pw adding !!!!
hpernit_1.f:c  ! pw end added   
hpernit_1.f:c! pw out     UTAM= KSUAMK*AMCONC/(CSUAM+ AMCONC)
hpernit_1.f:c! pw out     UTAM= UTAM*MOISTM/1.0E6
hpernit_1.f:c ! pw adding !!!!
hpernit_1.f:c  ! pw end added   
hpernit.f:     .            , pwsoilD(4), fieldcp(4)    ! pw add 
hpernit.f:      common/pwsoil/pwsoilD,fieldcp   
hpernit.f:c   ! pw  will add 
hpernit.f:c          pwsoild(j) = soild(j)
hpernit.f:c   ! pw added although already has "soilD and soilM"  
hpernit.f:c! pw: the next 26 lines are added by pw! ??????? 
hpernit.f:c        pwwiltpt = pwwiltpt * pwsoild ! wiltpt from in/in as (in) spec soil
hpernit.f:           fieldcp(jw) = wiltpt(jw)**0.57   ! pw 8/25/06 
hpernit.f:           wiltpt(jw) =   wiltpt(jw) * pwsoild(jw) 
hpernit.f:           fieldcp(jw) = fieldcp(jw) * pwsoild(jw)   ! pw 8/25/06 
hpernit.f:c! pw  end pw added
hpernit.f:c pw for dynamic litter, not using!       include     'pwgligl.inc'
hpernit.f:      common/pwsoil/pwsoilD,fieldcp         ! pw 
hpernit.f:     M           , pwsoild(4),fieldcp(4)    ! pw add 
hpernit.f:c ! pw           ,pwwiltpt(4), pwsoild(4), pwfake(5)    ! pw 
hpernit.f:c  ! pw adding
hpernit.f:c         do jpw = 1, 4
hpernit.f:c            pwsoildd(jpw) = wiltpt(jpw) / pwsoild(jpw)   
hpernit.f:c  ! pw added !!!!!!!!!!!!!!!!!!!!
hpernit.f:     x             , pwsoild(1), uunits,fieldcp(1))    ! pw 
hpernit.f:     x             , pwsoild(2), uunits,fieldcp(2))    ! pw 
hpernit.f:     x             , pwsoild(1), uunits,fieldcp(1))    ! pw 
hpernit.f:     x             , pwsoild(2), uunits,fieldcp(2))    ! pw 
hpernit.f:     x             , pwsoild(3), uunits,fieldcp(3))    ! pw 
hpernit.f:     x             , pwsoild(4), uunits,fieldcp(4))    ! pw 
hpernit.f:     x                   , pwsoildd, uunits,fldcp)  ! pw
hpernit.f:     x           , pwsoildd, pwmoistD,fldcp       ! pw
hpernit.f:c    x           , pwwiltpt, pwsoild, pwsoilv     ! pw  pwmoistD=SMST
hpernit.f:      integer     uunits  ! pw 
hpernit.f:c  ! pw adding  
hpernit.f:c no! er   pwwiltpt = wiltpt  * cfinma    ! for forest only
hpernit.f:         pwmoistD= moistm  /  cfinma   ! correct, mass -> volume (inch)
hpernit.f:c no     pwsoilv  = pwsoild * cfinma                     
hpernit.f:c  ! pw end added
hpernit.f:c ! pw 8/9/06 adding, because input max is mass/area/day for per depth soil. 
hpernit.f:              KSUNIK = KSUNIK * pwsoildd * 0.01  ! otherwise, input *0.01  
hpernit.f:              KSUAMK = KSUAMK * pwsoildd * 0.01  ! otherwise, input *0.01  
hpernit.f:              KSINIK = KSINIK * pwsoildd * 0.01  ! otherwise, input *0.01  
hpernit.f:              KSIAMK = KSIAMK * pwsoildd * 0.01  ! otherwise, input *0.01  
hpernit.f:c ! pw end added 
hpernit.f:c ! pw 8/9/06 adding, because input max is mass/area/day for per depth soil. 
hpernit.f:              KSUNIK = KSUNIK * pwsoildd * 0.01  ! otherwise, input *0.01  
hpernit.f:              KSUAMK = KSUAMK * pwsoildd * 0.01  ! otherwise, input *0.01  
hpernit.f:              KSINIK = KSINIK * pwsoildd * 0.01  ! otherwise, input *0.01  
hpernit.f:              KSIAMK = KSIAMK * pwsoildd * 0.01  ! otherwise, input *0.01  
hpernit.f:c ! pw end added 
hpernit.f:c! pw out   NICONC= NO3/MOISTM*1.0E6
hpernit.f:c! pw out   AMCONC= AMSU/MOISTM*1.0E6
hpernit.f:c ! pw  adding
hpernit.f:c          if(pwmoistD .lt. 0.2*pwsoildd) then 
hpernit.f:           if( SMST    .lt. fldcp)then ! 0.2*pwsoildd = fldcp 
hpernit.f:c ! pw end-added 
hpernit.f:c ! pw out    IMMNI= KSINIK*NICONC/(CSINI+ NICONC)
hpernit.f:c ! pw out    IMMNI= IMMNI*MOISTM/1.0E6
hpernit.f:c ! pw adding !!!!
hpernit.f:c             if(pwmoistD .lt. wiltpt ) then   ! compare depth of water
hpernit.f:c  ! pw end added   
hpernit.f:c! pw out     IMMAM= KSIAMK*AMCONC/(CSIAM+ AMCONC)
hpernit.f:c! pw out     IMMAM= IMMAM*MOISTM/1.0E6
hpernit.f:c             if(pwmoistD .lt. wiltpt ) then   ! compare depth of water
hpernit.f:c  ! pw end added   
hpernit.f:c ! pw adding for moisture affect 
hpernit.f:c pla.n        (   (smst-wiltpt)/(pwsoildd*0.2 - wiltpt)  )
hpernit.f:c    .         (0.5+(0.5 * (smst-wiltpt)/(pwsoildd*0.2 - wiltpt) ))
hpernit.f:c!   .         (0.5 * (1.0 + (smst-wiltpt)/(pwsoildd*0.2 - wiltpt) ) )
hpernit.f:cpw    the following one is using, but taken out temperaly for linear!! 
hpernit.f:cpw              utntot = (nuptg + ndefc) * 
hpernit.f:cpw     .         (        ((smst-wiltpt)/(fldcp - wiltpt) )**0.25)
hpernit.f:c    .         (0.5+0.5*((smst-wiltpt)/(pwsoildd*0.2 - wiltpt) )**0.25)
hpernit.f:c! pw out     UTNTOT= NUPTG+ NDEFC
hpernit.f:c ! pw end added   
hpernit.f:c!pw out!!    UTNTOT= NUPTG+ NDEFC
hpernit.f:c! pw out     UTNI= KSUNIK*NICONC/(CSUNI+ NICONC)
hpernit.f:c! pw out     UTNI= UTNI*MOISTM/1.0E6
hpernit.f:c ! pw adding !!!!
hpernit.f:c  ! pw end added   
hpernit.f:c! pw out     UTAM= KSUAMK*AMCONC/(CSUAM+ AMCONC)
hpernit.f:c! pw out     UTAM= UTAM*MOISTM/1.0E6
hpernit.f:c ! pw adding !!!!
hpernit.f:c  ! pw end added   
hperqua.f:C           suro is available from pwater
hperqua.f:C           suro is available from pwater
hperqua.f:C           ifwo is available from pwater
hperqua.f:C           agwo is available from pwater
hperqua.f:C           pero is available from pwater
hpersed_bicknell_nvsi_fix.f:C       csnofg not available from pwater
hpersed_bicknell_nvsi_fix.f:C       read time series supplied by pwater
hpersed_bicknell_nvsi_fix.f:C       the above time series are available from pwater
hpersed.f:C       csnofg not available from pwater
hpersed.f:C       read time series supplied by pwater
hpersed.f:C       the above time series are available from pwater
hpersed_nvsi_fix.f:C       csnofg not available from pwater
hpersed_nvsi_fix.f:C       read time series supplied by pwater
hpersed_nvsi_fix.f:C       the above time series are available from pwater
hpersed_original.f:C       csnofg not available from pwater
hpersed_original.f:C       read time series supplied by pwater
hpersed_original.f:C       the above time series are available from pwater
hperwat.f:C     Process input for pwater section of module perlnd
hperwat.f:      INCLUDE    'cplpw.inc'
hperwat.f:C     process values in table - type pwat-parm1
hperwat.f:C     check to see if we need to read pwat-parm4
hperwat.f:C     process values in table - type pwat-parm2
hperwat.f:C     process values in table - type pwat-parm3
hperwat.f:C       process values in table - type pwat-parm4
hperwat.f:C     process values in table - type pwat-parm5
hperwat.f:C     process values in table-type pwat-state1
hperwat.f:C       process vals applicable to each block - table-type pwat-blkstat
hperwat.f:      INCLUDE     'cplpw.inc'
hperwat.f:      INCLUDE  'cplpw.inc'
hperwat.f:      INCLUDE   'cplpw.inc'
hperwat.f:      INCLUDE    'cplpw.inc'
hperwat.f:      INCLUDE    'cplpw.inc'
hperwat.f:      INCLUDE   'cplpw.inc'
hrchhyd.f:C       compute depth, surface area, average depth and topwidth
hrchhyd.f:C     Compute depth, stage, surface area, average depth, topwidth,
